@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .animate-in {
    animation-delay: calc(var(--index) * 130ms);
  }
}

html {
    scroll-behavior: smooth;
    scroll-padding-top: 80px;
}

/* Only animate for users who allow motion */
@media (prefers-reduced-motion: no-preference) {
  /* Section container starts invisible */
  .reveal {
    opacity: 0;
    transform: translateY(40px) scale(0.95);
    filter: blur(6px);
    transition:
      opacity 1s cubic-bezier(.22,.61,.36,1),
      transform 2s cubic-bezier(.22,.61,.36,1),
      filter .2s cubic-bezier(.22,.61,.36,1);
    will-change: opacity, transform, filter;
    /* Perf: skip offscreen rendering but keep layout space */
    content-visibility: auto;
    contain-intrinsic-size: 800px; /* rough section height hint to avoid CLS */
  }

  /* When in view, fade in + float up + un-blur */
  .reveal.is-visible {
    opacity: 1;
    transform: translateY(0) scale(1);
    filter: blur(0);
  }

  .fade-in {
    opacity: 0;
    transform: translateY(16px);
    transition:
      opacity .6s cubic-bezier(.22,.61,.36,1),
      transform .6s cubic-bezier(.22,.61,.36,1),
      filter .6s cubic-bezier(.22,.61,.36,1);
    will-change: opacity, transform, filter;
  }
  .fade-in.is-visible {
    opacity: 1;
    transform: translateY(0);
    filter: blur(0);
  }

  /* Children of a stagger container start hidden */
  .stagger > * {
    opacity: 0;
    transform: translateY(16px);
    transition:
      opacity .45s cubic-bezier(.22,.61,.36,1),
      transform .45s cubic-bezier(.22,.61,.36,1);
    will-change: opacity, transform;
  }

  /* When the *ancestor section* becomes visible, animate its staggered children */
  .reveal.is-visible .stagger > * {
    opacity: 1;
    transform: translateY(0);
  }

  /* Delay per child: --i is set by JS; step/duration are tunable per container */
  .stagger > * { transition-delay: calc(var(--stagger-step, 90ms) * var(--i, 0)); }

  /* Slower variant for key details */
  .stagger--slow > * { transition-duration: var(--stagger-duration, .7s); }
  .stagger--slow > * { transition-delay: calc(var(--stagger-step, 140ms) * var(--i, 0)); }

  /* Optional: tiny lift optimization for grids */
  .grid-stagger > * { will-change: transform; }
}

@keyframes ripple {
  0%   { transform: scale(0);   opacity: .35; }
  100% { transform: scale(2.4); opacity: 0;   }
}


